import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from bots.child.states import SalesmanCart, SalesmanShop
from infrastructure.database.repos import Database

router = Router(name=__file__)


@router.callback_query(F.data == "view_products_salesman")
async def view_products_salesman_handler(callback: CallbackQuery, db: Database):
    await callback.answer()
    await callback.message.delete()
    products = (
        await db.get_available_products()
    )  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if products:
        product_kb = [
            [
                InlineKeyboardButton(
                    text=f"{product['name']} - {product['price']} –ò—Ç.",
                    callback_data=f"salesman_select_product_{product['id']}",
                ),
            ]
            for product in products
        ]
        product_kb.append(
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="cancel")],
        )
        p_kb = InlineKeyboardMarkup(inline_keyboard=product_kb)

        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", reply_markup=p_kb)
    else:
        await callback.message.answer("–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏.")


@router.callback_query(F.data.startswith("salesman_select_product_"))
async def salesman_select_product_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    product_id = int(callback.data.split("_")[-1])
    await state.update_data(product_id=product_id)
    await state.set_state(SalesmanShop.buyer_id)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ id –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä.",
    )


@router.message(SalesmanShop.buyer_id)
async def salesman_buyer_id_handler(message: Message, state: FSMContext, db: Database):
    buyer_id = message.text.strip()
    if not re.match(r"^\d+$", buyer_id):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç id! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user = await db.get_user_by_id(int(buyer_id))
    if not user:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    c_bk = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ üîô",
                    callback_data="view_products_salesman",
                ),
            ],
        ],
    )

    data = await state.get_data()
    product_id = data["product_id"]
    product = await db.get_product(product_id)

    if user["balance"] >= product["price"]:
        # –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ —Ö–≤–∞—Ç–∞–µ—Ç, —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        await db.buy_product(int(buyer_id), int(product_id), 1)

        await message.answer(
            f"–£—Å–ø–µ—Ö! {user['name']} –∫—É–ø–∏–ª {product['name']} –∑–∞ "
            f"{product['price']} –ò—Ç.",
            reply_markup=c_bk,
        )
    else:
        await message.answer("–£ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=c_bk)

    await state.clear()


@router.callback_query(F.data == "members_purchases")
async def view_members_purchases_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    await state.set_state(SalesmanCart.buyer_id)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ id —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á—å—é –∫–æ—Ä–∑–∏–Ω—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å.",
    )


@router.message(SalesmanCart.buyer_id)
async def show_cart_handler(message: Message, state: FSMContext, db: Database):
    buyer_id = message.text.strip()
    if not re.match(r"^\d+$", buyer_id):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç id! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user = await db.get_user_by_id(int(buyer_id))
    if not user:
        await message.answer("–¢–∞–∫–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    purchases = await db.get_user_purchases(int(buyer_id))

    c_bk = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="cancel")],
        ],
    )

    if purchases:
        cart_text = "\n".join(
            [
                f"{purchase['product_name']} x{purchase['quantity_purchased']}"
                for purchase in purchases
            ],
        )
        confirm_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=f"confirm_clear_cart_{buyer_id}",
                    ),
                ],
            ],
        )
        await message.answer(
            f"–ö–æ—Ä–∑–∏–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user['name']}:\n\n{cart_text}",
            reply_markup=confirm_kb,
        )
    else:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=c_bk)

    await state.clear()


@router.callback_query(F.data.startswith("confirm_clear_cart_"))
async def confirm_clear_cart_handler(callback: CallbackQuery, db: Database):
    buyer_id = int(callback.data.split("_")[-1])

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.clear_user_purchases(buyer_id)

    c_bk = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="cancel")],
        ],
    )

    await callback.message.answer(
        f"–ö–æ—Ä–∑–∏–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å id {buyer_id} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!",
        reply_markup=c_bk,
    )
    await callback.message.delete()
